        :root {
            --primary-color: #4a90e2;
            --background-color: #f5f7fa;
            --text-color: #2c3e50;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            background-color: var(--background-color);
            color: var(--text-color);
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        header {
            text-align: center;
            margin-bottom: 3rem;
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: var(--primary-color);
        }

        .upload-section {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            text-align: center;
        }

        .drop-zone {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 3rem;
            margin: 1rem 0;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .drop-zone:hover {
            border-color: var(--primary-color);
            background-color: rgba(74, 144, 226, 0.05);
        }

        .drop-zone.dragover {
            border-color: var(--primary-color);
            background-color: rgba(74, 144, 226, 0.1);
        }

        #imagePreview {
            max-width: 100%;
            max-height: 300px;
            margin: 1rem 0;
            display: none;
            border-radius: 8px;
        }

        .results-section {
            display: none;
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .color-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }

        .color-card {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .color-preview {
            height: 100px;
            width: 100%;
        }

        .color-info {
            padding: 1rem;
            text-align: center;
        }

        .color-hex {
            font-family: monospace;
            font-size: 0.9rem;
            color: #666;
        }

        .analysis-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .analysis-card {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
        }

        .analysis-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .btn {
            background-color: var(--primary-color);
            color: white;
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: #357abd;
        }

        .loading {
            display: none;
            margin: 2rem 0;
            text-align: center;
        }

        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }



                const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const imagePreview = document.getElementById('imagePreview');
        const analyzeBtn = document.getElementById('analyzeBtn');
        const loading = document.getElementById('loading');
        const results = document.getElementById('results');

        // Drag and drop handlers
        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('dragover');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('dragover');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('dragover');
            handleFile(e.dataTransfer.files[0]);
        });

        dropZone.addEventListener('click', () => {
            fileInput.click();
        });

        fileInput.addEventListener('change', (e) => {
            handleFile(e.target.files[0]);
        });

        function handleFile(file) {
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block';
                    analyzeBtn.style.display = 'inline-block';
                };
                reader.readAsDataURL(file);
            }
        }

        analyzeBtn.addEventListener('click', async () => {
            loading.style.display = 'block';
            results.style.display = 'none';

            const formData = new FormData();
            formData.append('image', fileInput.files[0]);

            try {
                const response = await axios.post('http://127.0.0.1:5000/analyze', formData)

                displayResults(response.data);
            } catch (error) {
                console.error('Error analyzing colors:', error);
                alert('Error analyzing colors. Please try again.');
            } finally {
                loading.style.display = 'none';
            }
        });

        function displayResults(data) {
         // Check if data contains required fields, else use defaults
    const brightness = data.brightness || "-";
    const saturation = data.saturation || "-";
    const dominantColor = data.dominant_color || "#ffffff";
    const palette = data.palette || [];

    // Update analysis values
    document.getElementById('brightness').textContent = brightness;
    document.getElementById('saturation').textContent = saturation;

    // Display dominant color`
    const dominantColorHtml = createColorCard(dominantColor, 'Dominant');
    document.getElementById('dominantColor').innerHTML = dominantColorHtml;

    // Display color palette, handle cases where palette might be empty
    const paletteHtml = palette.map((color, index) => 
        createColorCard(color, `Color ${index + 1}`)
    ).join('');
    document.getElementById('colorPalette').innerHTML = paletteHtml || `<p>No colors detected</p>`;

    results.style.display = 'block';
        }

        function createColorCard(color, label) {
            return `
                <div class="color-card">
                    <div class="color-preview" style="background-color: ${color}"></div>
                    <div class="color-info">
                        <div>${label}</div>
                        <div class="color-hex">${color}</div>
                    </div>
                </div>
            `;
        }